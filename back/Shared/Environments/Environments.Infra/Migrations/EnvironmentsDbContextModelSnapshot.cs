// <auto-generated />
using System;
using Environments.Infra.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Environments.Infra.Migrations
{
    [DbContext(typeof(EnvironmentsDbContext))]
    partial class EnvironmentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shared")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Distributors.Domain.Models.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsAllowingCommercialCommunication")
                        .HasColumnType("bit")
                        .HasColumnName("IsAllowingCommercialCommunication");

                    b.Property<bool>("IsLucca")
                        .HasColumnType("bit")
                        .HasColumnName("IsLucca");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Distributors", "shared");
                });

            modelBuilder.Entity("Environments.Domain.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cluster")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cluster");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("Domain")
                        .HasColumnType("int")
                        .HasColumnName("Domain");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("Purpose")
                        .HasColumnType("int")
                        .HasColumnName("Purpose");

                    b.Property<string>("Subdomain")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subdomain");

                    b.HasKey("Id");

                    b.ToTable("Environments", "shared");
                });

            modelBuilder.Entity("Environments.Domain.EnvironmentAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Comment");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("DistributorId");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndsAt");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int")
                        .HasColumnName("EnvironmentId");

                    b.Property<int>("Lifecycle")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("Lifecycle");

                    b.Property<string>("RevocationComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevocationComment");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RevokedAt");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartsAt");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("EnvironmentAccesses", "shared");
                });

            modelBuilder.Entity("Environments.Domain.EnvironmentRenaming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKeyStorageId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("apiKeyStorageId");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int")
                        .HasColumnName("environmentId");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("errorMessage");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("newName");

                    b.Property<string>("OldName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("oldName");

                    b.Property<DateTime>("RenamedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("renamedOn");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("EnvironmentRenaming", "shared");
                });

            modelBuilder.Entity("Environments.Domain.EnvironmentSharedAccess", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("int")
                        .HasColumnName("ConsumerId");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int")
                        .HasColumnName("EnvironmentId");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("EnvironmentSharedAccesses", "shared");
                });

            modelBuilder.Entity("Environments.Domain.EnvironmentRenaming", b =>
                {
                    b.HasOne("Environments.Domain.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("Environments.Domain.EnvironmentSharedAccess", b =>
                {
                    b.HasOne("Distributors.Domain.Models.Distributor", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Environments.Domain.Environment", null)
                        .WithMany("ActiveAccesses")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Environments.Domain.EnvironmentAccess", "Access")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("Environments.Domain.Environment", b =>
                {
                    b.Navigation("ActiveAccesses");
                });
#pragma warning restore 612, 618
        }
    }
}
