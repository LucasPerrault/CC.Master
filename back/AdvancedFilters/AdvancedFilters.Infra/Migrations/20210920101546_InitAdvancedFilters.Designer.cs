// <auto-generated />
using System;
using AdvancedFilters.Infra.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdvancedFilters.Infra.Migrations
{
    [DbContext(typeof(AdvancedFiltersDbContext))]
    [Migration("20210920101546_InitAdvancedFilters")]
    partial class InitAdvancedFilters
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cafe")
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdvancedFilters.Domain.Billing.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnName("ExternalId")
                        .HasColumnType("uniqueidentifier")
                        .HasMaxLength(36);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Billing.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnName("ExternalId")
                        .HasColumnType("uniqueidentifier")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Billing.Models.EstablishmentContract", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentId", "EstablishmentId", "ContractId");

                    b.HasIndex("ContractId");

                    b.ToTable("EstablishmentContracts");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.AppContact", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppInstanceId")
                        .HasColumnName("AppInstanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstablishmentId")
                        .HasColumnName("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnName("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentId", "Id");

                    b.HasIndex("EnvironmentId", "AppInstanceId");

                    b.HasIndex("EnvironmentId", "EstablishmentId");

                    b.ToTable("AppContacts");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.ClientContact", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnName("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstablishmentId")
                        .HasColumnName("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnName("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnName("RoleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentId", "Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RoleCode");

                    b.HasIndex("EnvironmentId", "EstablishmentId");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.SpecializedContact", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstablishmentId")
                        .HasColumnName("EstablishmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnName("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnName("RoleCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentId", "Id");

                    b.HasIndex("RoleCode");

                    b.HasIndex("EnvironmentId", "EstablishmentId");

                    b.ToTable("SpecializedContacts");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.AppInstance", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnName("ApplicationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnName("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentId", "Id");

                    b.ToTable("AppInstances");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.Environment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnName("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductionHost")
                        .IsRequired()
                        .HasColumnName("ProductionHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasColumnName("Subdomain")
                        .HasColumnType("nvarchar(63)")
                        .HasMaxLength(63);

                    b.HasKey("Id");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.Establishment", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActivityCode")
                        .HasColumnName("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnName("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnName("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LegalIdentificationNumber")
                        .HasColumnName("LegalIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegalUnitId")
                        .HasColumnName("LegalUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnName("TimeZoneId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersCount")
                        .HasColumnName("UsersCount")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentId", "Id");

                    b.HasIndex("EnvironmentId", "LegalUnitId");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.LegalUnit", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActivityCode")
                        .HasColumnName("ActivityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnName("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeadquartersId")
                        .HasColumnName("HeadquartersId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnName("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LegalIdentificationNumber")
                        .HasColumnName("LegalIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentId", "Id");

                    b.ToTable("LegalUnits");
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Billing.Models.Contract", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Billing.Models.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Billing.Models.EstablishmentContract", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Billing.Models.Contract", "Contract")
                        .WithMany("EstablishmentAttachments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId", "EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.AppContact", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.AppInstance", "AppInstance")
                        .WithMany()
                        .HasForeignKey("EnvironmentId", "AppInstanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId", "EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.ClientContact", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Billing.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasPrincipalKey("ExternalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId", "EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Contacts.Models.SpecializedContact", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId", "EstablishmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.AppInstance", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany("AppInstances")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.Establishment", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdvancedFilters.Domain.Instance.Models.LegalUnit", "LegalUnit")
                        .WithMany("Establishments")
                        .HasForeignKey("EnvironmentId", "LegalUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvancedFilters.Domain.Instance.Models.LegalUnit", b =>
                {
                    b.HasOne("AdvancedFilters.Domain.Instance.Models.Environment", "Environment")
                        .WithMany("LegalUnits")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
